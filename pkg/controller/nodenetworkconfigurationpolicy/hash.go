package nodenetworkconfigurationpolicy

import (
	"crypto/md5"
	"fmt"

	"github.com/ghodss/yaml"
	mcfgv1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
)

var (
	// salt is 80 random bytes.
	// The salt was generated by `od -vAn -N80 -tu1 < /dev/urandom`. Do not change it.
	salt = []byte{
		229, 245, 41, 58, 235, 32, 191, 21, 84, 53, 125, 103, 195, 161, 151, 227,
		144, 119, 89, 119, 41, 131, 185, 194, 212, 249, 189, 45, 123, 154, 193, 212,
		175, 234, 236, 8, 28, 79, 93, 216, 106, 197, 226, 94, 97, 137, 19, 53,
		31, 112, 200, 147, 112, 190, 98, 167, 117, 149, 208, 183, 60, 100, 54, 172,
		44, 124, 125, 216, 96, 50, 105, 126, 243, 101, 124, 98, 247, 206, 155, 201,
	}
)

func getMachineConfigHash(spec *mcfgv1.MachineConfigSpec) (string, error) {
	if spec == nil {
		return "", fmt.Errorf("empty machineconfig object")
	}

	data, err := yaml.Marshal(*spec)
	if err != nil {
		return "", err
	}

	h, err := hashData(data)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("%x", h), nil
}

func hashData(data []byte) ([]byte, error) {
	hasher := md5.New()
	if _, err := hasher.Write(salt); err != nil {
		return nil, fmt.Errorf("error computing hash: %v", err)
	}
	if _, err := hasher.Write(data); err != nil {
		return nil, fmt.Errorf("error computing hash: %v", err)
	}
	return hasher.Sum(nil), nil
}
